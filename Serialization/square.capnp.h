// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: square.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#ifndef CAPNP_VERSION
#error "CAPNP_VERSION is not defined, is capnp/generated-header-support.h missing?"
#elif CAPNP_VERSION != 1000002
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif


CAPNP_BEGIN_HEADER

namespace capnp {
namespace schemas {

CAPNP_DECLARE_SCHEMA(f236a326041fb6f0);
CAPNP_DECLARE_SCHEMA(8aa25bcda3a98215);
enum class KeyboardInput_8aa25bcda3a98215: uint16_t {
  RIGHT,
  LEFT,
  UP,
  DOWN,
};
CAPNP_DECLARE_ENUM(KeyboardInput, 8aa25bcda3a98215);
CAPNP_DECLARE_SCHEMA(9920391038ebea65);
CAPNP_DECLARE_SCHEMA(d50d4b869b61dac3);
CAPNP_DECLARE_SCHEMA(a429753594e8af34);
CAPNP_DECLARE_SCHEMA(9da92d54110a6635);
CAPNP_DECLARE_SCHEMA(9f73902131386d8a);
CAPNP_DECLARE_SCHEMA(f67bbf4537b60d14);
CAPNP_DECLARE_SCHEMA(fcef335dd7ebfd10);

}  // namespace schemas
}  // namespace capnp


struct Input {
  Input() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  typedef ::capnp::schemas::KeyboardInput_8aa25bcda3a98215 KeyboardInput;

  struct Type;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f236a326041fb6f0, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Input::Type {
  Type() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNSET,
    KEYPRESS,
    DISCONNECT_REQUEST,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9920391038ebea65, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event {
  Event() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Type;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(d50d4b869b61dac3, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Event::Type {
  Type() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    UNSET,
    DISCONNECT,
    CONNECT,
    ERROR,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(a429753594e8af34, 1, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Square {
  Square() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9da92d54110a6635, 2, 0)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct Squares {
  Squares() = delete;

  class Reader;
  class Builder;
  class Pipeline;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(9f73902131386d8a, 0, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MessageToClient {
  MessageToClient() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  struct Data;

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(f67bbf4537b60d14, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

struct MessageToClient::Data {
  Data() = delete;

  class Reader;
  class Builder;
  class Pipeline;
  enum Which: uint16_t {
    SQUARES,
    EVENT,
  };

  struct _capnpPrivate {
    CAPNP_DECLARE_STRUCT_HEADER(fcef335dd7ebfd10, 2, 1)
    #if !CAPNP_LITE
    static constexpr ::capnp::_::RawBrandedSchema const* brand() { return &schema->defaultBrand; }
    #endif  // !CAPNP_LITE
  };
};

// =======================================================================================

class Input::Reader {
public:
  typedef Input Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Type::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Input::Builder {
public:
  typedef Input Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Type::Builder getType();
  inline typename Type::Builder initType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Input::Pipeline {
public:
  typedef Input Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Type::Pipeline getType();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Input::Type::Reader {
public:
  typedef Type Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnset() const;
  inline  ::capnp::Void getUnset() const;

  inline bool isKeypress() const;
  inline  ::Input::KeyboardInput getKeypress() const;

  inline bool isDisconnectRequest() const;
  inline bool hasDisconnectRequest() const;
  inline  ::capnp::Text::Reader getDisconnectRequest() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Input::Type::Builder {
public:
  typedef Type Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnset();
  inline  ::capnp::Void getUnset();
  inline void setUnset( ::capnp::Void value = ::capnp::VOID);

  inline bool isKeypress();
  inline  ::Input::KeyboardInput getKeypress();
  inline void setKeypress( ::Input::KeyboardInput value);

  inline bool isDisconnectRequest();
  inline bool hasDisconnectRequest();
  inline  ::capnp::Text::Builder getDisconnectRequest();
  inline void setDisconnectRequest( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initDisconnectRequest(unsigned int size);
  inline void adoptDisconnectRequest(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownDisconnectRequest();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Input::Type::Pipeline {
public:
  typedef Type Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Reader {
public:
  typedef Event Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline typename Type::Reader getType() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Builder {
public:
  typedef Event Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline typename Type::Builder getType();
  inline typename Type::Builder initType();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Pipeline {
public:
  typedef Event Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Type::Pipeline getType();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Event::Type::Reader {
public:
  typedef Type Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isUnset() const;
  inline  ::capnp::Void getUnset() const;

  inline bool isDisconnect() const;
  inline  ::capnp::Void getDisconnect() const;

  inline bool isConnect() const;
  inline  ::capnp::Void getConnect() const;

  inline bool isError() const;
  inline bool hasError() const;
  inline  ::capnp::Text::Reader getError() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Event::Type::Builder {
public:
  typedef Type Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isUnset();
  inline  ::capnp::Void getUnset();
  inline void setUnset( ::capnp::Void value = ::capnp::VOID);

  inline bool isDisconnect();
  inline  ::capnp::Void getDisconnect();
  inline void setDisconnect( ::capnp::Void value = ::capnp::VOID);

  inline bool isConnect();
  inline  ::capnp::Void getConnect();
  inline void setConnect( ::capnp::Void value = ::capnp::VOID);

  inline bool isError();
  inline bool hasError();
  inline  ::capnp::Text::Builder getError();
  inline void setError( ::capnp::Text::Reader value);
  inline  ::capnp::Text::Builder initError(unsigned int size);
  inline void adoptError(::capnp::Orphan< ::capnp::Text>&& value);
  inline ::capnp::Orphan< ::capnp::Text> disownError();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Event::Type::Pipeline {
public:
  typedef Type Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Square::Reader {
public:
  typedef Square Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getX() const;

  inline  ::uint32_t getY() const;

  inline  ::uint32_t getWidth() const;

  inline  ::uint32_t getHeight() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Square::Builder {
public:
  typedef Square Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline  ::uint32_t getX();
  inline void setX( ::uint32_t value);

  inline  ::uint32_t getY();
  inline void setY( ::uint32_t value);

  inline  ::uint32_t getWidth();
  inline void setWidth( ::uint32_t value);

  inline  ::uint32_t getHeight();
  inline void setHeight( ::uint32_t value);

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Square::Pipeline {
public:
  typedef Square Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class Squares::Reader {
public:
  typedef Squares Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline bool hasPeople() const;
  inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Reader getPeople() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class Squares::Builder {
public:
  typedef Squares Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline bool hasPeople();
  inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Builder getPeople();
  inline void setPeople( ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Reader value);
  inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Builder initPeople(unsigned int size);
  inline void adoptPeople(::capnp::Orphan< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>&& value);
  inline ::capnp::Orphan< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>> disownPeople();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Squares::Pipeline {
public:
  typedef Squares Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MessageToClient::Reader {
public:
  typedef MessageToClient Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline double getTimestamp() const;

  inline typename Data::Reader getData() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MessageToClient::Builder {
public:
  typedef MessageToClient Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline double getTimestamp();
  inline void setTimestamp(double value);

  inline typename Data::Builder getData();
  inline typename Data::Builder initData();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MessageToClient::Pipeline {
public:
  typedef MessageToClient Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

  inline typename Data::Pipeline getData();
private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

class MessageToClient::Data::Reader {
public:
  typedef Data Reads;

  Reader() = default;
  inline explicit Reader(::capnp::_::StructReader base): _reader(base) {}

  inline ::capnp::MessageSize totalSize() const {
    return _reader.totalSize().asPublic();
  }

#if !CAPNP_LITE
  inline ::kj::StringTree toString() const {
    return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
  }
#endif  // !CAPNP_LITE

  inline Which which() const;
  inline bool isSquares() const;
  inline bool hasSquares() const;
  inline  ::Squares::Reader getSquares() const;

  inline bool isEvent() const;
  inline bool hasEvent() const;
  inline  ::Event::Reader getEvent() const;

private:
  ::capnp::_::StructReader _reader;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::List;
  friend class ::capnp::MessageBuilder;
  friend class ::capnp::Orphanage;
};

class MessageToClient::Data::Builder {
public:
  typedef Data Builds;

  Builder() = delete;  // Deleted to discourage incorrect usage.
                       // You can explicitly initialize to nullptr instead.
  inline Builder(decltype(nullptr)) {}
  inline explicit Builder(::capnp::_::StructBuilder base): _builder(base) {}
  inline operator Reader() const { return Reader(_builder.asReader()); }
  inline Reader asReader() const { return *this; }

  inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
  inline ::kj::StringTree toString() const { return asReader().toString(); }
#endif  // !CAPNP_LITE

  inline Which which();
  inline bool isSquares();
  inline bool hasSquares();
  inline  ::Squares::Builder getSquares();
  inline void setSquares( ::Squares::Reader value);
  inline  ::Squares::Builder initSquares();
  inline void adoptSquares(::capnp::Orphan< ::Squares>&& value);
  inline ::capnp::Orphan< ::Squares> disownSquares();

  inline bool isEvent();
  inline bool hasEvent();
  inline  ::Event::Builder getEvent();
  inline void setEvent( ::Event::Reader value);
  inline  ::Event::Builder initEvent();
  inline void adoptEvent(::capnp::Orphan< ::Event>&& value);
  inline ::capnp::Orphan< ::Event> disownEvent();

private:
  ::capnp::_::StructBuilder _builder;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
  friend class ::capnp::Orphanage;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class MessageToClient::Data::Pipeline {
public:
  typedef Data Pipelines;

  inline Pipeline(decltype(nullptr)): _typeless(nullptr) {}
  inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
      : _typeless(kj::mv(typeless)) {}

private:
  ::capnp::AnyPointer::Pipeline _typeless;
  friend class ::capnp::PipelineHook;
  template <typename, ::capnp::Kind>
  friend struct ::capnp::ToDynamic_;
};
#endif  // !CAPNP_LITE

// =======================================================================================

inline typename Input::Type::Reader Input::Reader::getType() const {
  return typename Input::Type::Reader(_reader);
}
inline typename Input::Type::Builder Input::Builder::getType() {
  return typename Input::Type::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Input::Type::Pipeline Input::Pipeline::getType() {
  return typename Input::Type::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Input::Type::Builder Input::Builder::initType() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.setDataField< ::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Input::Type::Builder(_builder);
}
inline  ::Input::Type::Which Input::Type::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Input::Type::Which Input::Type::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Input::Type::Reader::isUnset() const {
  return which() == Input::Type::UNSET;
}
inline bool Input::Type::Builder::isUnset() {
  return which() == Input::Type::UNSET;
}
inline  ::capnp::Void Input::Type::Reader::getUnset() const {
  KJ_IREQUIRE((which() == Input::Type::UNSET),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Input::Type::Builder::getUnset() {
  KJ_IREQUIRE((which() == Input::Type::UNSET),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Input::Type::Builder::setUnset( ::capnp::Void value) {
  _builder.setDataField<Input::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Input::Type::UNSET);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Input::Type::Reader::isKeypress() const {
  return which() == Input::Type::KEYPRESS;
}
inline bool Input::Type::Builder::isKeypress() {
  return which() == Input::Type::KEYPRESS;
}
inline  ::Input::KeyboardInput Input::Type::Reader::getKeypress() const {
  KJ_IREQUIRE((which() == Input::Type::KEYPRESS),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::Input::KeyboardInput>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::Input::KeyboardInput Input::Type::Builder::getKeypress() {
  KJ_IREQUIRE((which() == Input::Type::KEYPRESS),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::Input::KeyboardInput>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Input::Type::Builder::setKeypress( ::Input::KeyboardInput value) {
  _builder.setDataField<Input::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Input::Type::KEYPRESS);
  _builder.setDataField< ::Input::KeyboardInput>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Input::Type::Reader::isDisconnectRequest() const {
  return which() == Input::Type::DISCONNECT_REQUEST;
}
inline bool Input::Type::Builder::isDisconnectRequest() {
  return which() == Input::Type::DISCONNECT_REQUEST;
}
inline bool Input::Type::Reader::hasDisconnectRequest() const {
  if (which() != Input::Type::DISCONNECT_REQUEST) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Input::Type::Builder::hasDisconnectRequest() {
  if (which() != Input::Type::DISCONNECT_REQUEST) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Input::Type::Reader::getDisconnectRequest() const {
  KJ_IREQUIRE((which() == Input::Type::DISCONNECT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Input::Type::Builder::getDisconnectRequest() {
  KJ_IREQUIRE((which() == Input::Type::DISCONNECT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Input::Type::Builder::setDisconnectRequest( ::capnp::Text::Reader value) {
  _builder.setDataField<Input::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Input::Type::DISCONNECT_REQUEST);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Input::Type::Builder::initDisconnectRequest(unsigned int size) {
  _builder.setDataField<Input::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Input::Type::DISCONNECT_REQUEST);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Input::Type::Builder::adoptDisconnectRequest(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Input::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Input::Type::DISCONNECT_REQUEST);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Input::Type::Builder::disownDisconnectRequest() {
  KJ_IREQUIRE((which() == Input::Type::DISCONNECT_REQUEST),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline typename Event::Type::Reader Event::Reader::getType() const {
  return typename Event::Type::Reader(_reader);
}
inline typename Event::Type::Builder Event::Builder::getType() {
  return typename Event::Type::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Event::Type::Pipeline Event::Pipeline::getType() {
  return typename Event::Type::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename Event::Type::Builder Event::Builder::initType() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<0>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename Event::Type::Builder(_builder);
}
inline  ::Event::Type::Which Event::Type::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline  ::Event::Type::Which Event::Type::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline bool Event::Type::Reader::isUnset() const {
  return which() == Event::Type::UNSET;
}
inline bool Event::Type::Builder::isUnset() {
  return which() == Event::Type::UNSET;
}
inline  ::capnp::Void Event::Type::Reader::getUnset() const {
  KJ_IREQUIRE((which() == Event::Type::UNSET),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Event::Type::Builder::getUnset() {
  KJ_IREQUIRE((which() == Event::Type::UNSET),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Type::Builder::setUnset( ::capnp::Void value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::UNSET);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Type::Reader::isDisconnect() const {
  return which() == Event::Type::DISCONNECT;
}
inline bool Event::Type::Builder::isDisconnect() {
  return which() == Event::Type::DISCONNECT;
}
inline  ::capnp::Void Event::Type::Reader::getDisconnect() const {
  KJ_IREQUIRE((which() == Event::Type::DISCONNECT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Event::Type::Builder::getDisconnect() {
  KJ_IREQUIRE((which() == Event::Type::DISCONNECT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Type::Builder::setDisconnect( ::capnp::Void value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::DISCONNECT);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Type::Reader::isConnect() const {
  return which() == Event::Type::CONNECT;
}
inline bool Event::Type::Builder::isConnect() {
  return which() == Event::Type::CONNECT;
}
inline  ::capnp::Void Event::Type::Reader::getConnect() const {
  KJ_IREQUIRE((which() == Event::Type::CONNECT),
              "Must check which() before get()ing a union member.");
  return _reader.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::capnp::Void Event::Type::Builder::getConnect() {
  KJ_IREQUIRE((which() == Event::Type::CONNECT),
              "Must check which() before get()ing a union member.");
  return _builder.getDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Event::Type::Builder::setConnect( ::capnp::Void value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::CONNECT);
  _builder.setDataField< ::capnp::Void>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline bool Event::Type::Reader::isError() const {
  return which() == Event::Type::ERROR;
}
inline bool Event::Type::Builder::isError() {
  return which() == Event::Type::ERROR;
}
inline bool Event::Type::Reader::hasError() const {
  if (which() != Event::Type::ERROR) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Event::Type::Builder::hasError() {
  if (which() != Event::Type::ERROR) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::Text::Reader Event::Type::Reader::getError() const {
  KJ_IREQUIRE((which() == Event::Type::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::Text::Builder Event::Type::Builder::getError() {
  KJ_IREQUIRE((which() == Event::Type::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Event::Type::Builder::setError( ::capnp::Text::Reader value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::Text::Builder Event::Type::Builder::initError(unsigned int size) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::ERROR);
  return ::capnp::_::PointerHelpers< ::capnp::Text>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Event::Type::Builder::adoptError(
    ::capnp::Orphan< ::capnp::Text>&& value) {
  _builder.setDataField<Event::Type::Which>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, Event::Type::ERROR);
  ::capnp::_::PointerHelpers< ::capnp::Text>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::Text> Event::Type::Builder::disownError() {
  KJ_IREQUIRE((which() == Event::Type::ERROR),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::capnp::Text>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline  ::uint32_t Square::Reader::getX() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Square::Builder::getX() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Square::Builder::setX( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Square::Reader::getY() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Square::Builder::getY() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Square::Builder::setY( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Square::Reader::getWidth() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Square::Builder::getWidth() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline void Square::Builder::setWidth( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<2>() * ::capnp::ELEMENTS, value);
}

inline  ::uint32_t Square::Reader::getHeight() const {
  return _reader.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}

inline  ::uint32_t Square::Builder::getHeight() {
  return _builder.getDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS);
}
inline void Square::Builder::setHeight( ::uint32_t value) {
  _builder.setDataField< ::uint32_t>(
      ::capnp::bounded<3>() * ::capnp::ELEMENTS, value);
}

inline bool Squares::Reader::hasPeople() const {
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool Squares::Builder::hasPeople() {
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Reader Squares::Reader::getPeople() const {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Builder Squares::Builder::getPeople() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Squares::Builder::setPeople( ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Reader value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>::Builder Squares::Builder::initPeople(unsigned int size) {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), size);
}
inline void Squares::Builder::adoptPeople(
    ::capnp::Orphan< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>&& value) {
  ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>> Squares::Builder::disownPeople() {
  return ::capnp::_::PointerHelpers< ::capnp::List< ::Square,  ::capnp::Kind::STRUCT>>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline double MessageToClient::Reader::getTimestamp() const {
  return _reader.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline double MessageToClient::Builder::getTimestamp() {
  return _builder.getDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void MessageToClient::Builder::setTimestamp(double value) {
  _builder.setDataField<double>(
      ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename MessageToClient::Data::Reader MessageToClient::Reader::getData() const {
  return typename MessageToClient::Data::Reader(_reader);
}
inline typename MessageToClient::Data::Builder MessageToClient::Builder::getData() {
  return typename MessageToClient::Data::Builder(_builder);
}
#if !CAPNP_LITE
inline typename MessageToClient::Data::Pipeline MessageToClient::Pipeline::getData() {
  return typename MessageToClient::Data::Pipeline(_typeless.noop());
}
#endif  // !CAPNP_LITE
inline typename MessageToClient::Data::Builder MessageToClient::Builder::initData() {
  _builder.setDataField< ::uint16_t>(::capnp::bounded<4>() * ::capnp::ELEMENTS, 0);
  _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
  return typename MessageToClient::Data::Builder(_builder);
}
inline  ::MessageToClient::Data::Which MessageToClient::Data::Reader::which() const {
  return _reader.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}
inline  ::MessageToClient::Data::Which MessageToClient::Data::Builder::which() {
  return _builder.getDataField<Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS);
}

inline bool MessageToClient::Data::Reader::isSquares() const {
  return which() == MessageToClient::Data::SQUARES;
}
inline bool MessageToClient::Data::Builder::isSquares() {
  return which() == MessageToClient::Data::SQUARES;
}
inline bool MessageToClient::Data::Reader::hasSquares() const {
  if (which() != MessageToClient::Data::SQUARES) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MessageToClient::Data::Builder::hasSquares() {
  if (which() != MessageToClient::Data::SQUARES) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Squares::Reader MessageToClient::Data::Reader::getSquares() const {
  KJ_IREQUIRE((which() == MessageToClient::Data::SQUARES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Squares>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Squares::Builder MessageToClient::Data::Builder::getSquares() {
  KJ_IREQUIRE((which() == MessageToClient::Data::SQUARES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Squares>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MessageToClient::Data::Builder::setSquares( ::Squares::Reader value) {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::SQUARES);
  ::capnp::_::PointerHelpers< ::Squares>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Squares::Builder MessageToClient::Data::Builder::initSquares() {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::SQUARES);
  return ::capnp::_::PointerHelpers< ::Squares>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MessageToClient::Data::Builder::adoptSquares(
    ::capnp::Orphan< ::Squares>&& value) {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::SQUARES);
  ::capnp::_::PointerHelpers< ::Squares>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Squares> MessageToClient::Data::Builder::disownSquares() {
  KJ_IREQUIRE((which() == MessageToClient::Data::SQUARES),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Squares>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool MessageToClient::Data::Reader::isEvent() const {
  return which() == MessageToClient::Data::EVENT;
}
inline bool MessageToClient::Data::Builder::isEvent() {
  return which() == MessageToClient::Data::EVENT;
}
inline bool MessageToClient::Data::Reader::hasEvent() const {
  if (which() != MessageToClient::Data::EVENT) return false;
  return !_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline bool MessageToClient::Data::Builder::hasEvent() {
  if (which() != MessageToClient::Data::EVENT) return false;
  return !_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS).isNull();
}
inline  ::Event::Reader MessageToClient::Data::Reader::getEvent() const {
  KJ_IREQUIRE((which() == MessageToClient::Data::EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Event>::get(_reader.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline  ::Event::Builder MessageToClient::Data::Builder::getEvent() {
  KJ_IREQUIRE((which() == MessageToClient::Data::EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Event>::get(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MessageToClient::Data::Builder::setEvent( ::Event::Reader value) {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::EVENT);
  ::capnp::_::PointerHelpers< ::Event>::set(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), value);
}
inline  ::Event::Builder MessageToClient::Data::Builder::initEvent() {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::EVENT);
  return ::capnp::_::PointerHelpers< ::Event>::init(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void MessageToClient::Data::Builder::adoptEvent(
    ::capnp::Orphan< ::Event>&& value) {
  _builder.setDataField<MessageToClient::Data::Which>(
      ::capnp::bounded<4>() * ::capnp::ELEMENTS, MessageToClient::Data::EVENT);
  ::capnp::_::PointerHelpers< ::Event>::adopt(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS), kj::mv(value));
}
inline ::capnp::Orphan< ::Event> MessageToClient::Data::Builder::disownEvent() {
  KJ_IREQUIRE((which() == MessageToClient::Data::EVENT),
              "Must check which() before get()ing a union member.");
  return ::capnp::_::PointerHelpers< ::Event>::disown(_builder.getPointerField(
      ::capnp::bounded<0>() * ::capnp::POINTERS));
}


CAPNP_END_HEADER

