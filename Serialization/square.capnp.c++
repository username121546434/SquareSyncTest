// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: square.capnp
#include "pch.h"
#include "square.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<29> b_f236a326041fb6f0 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    240, 182,  31,   4,  38, 163,  54, 242,
     13,   0,   0,   0,   1,   0,   1,   0,
    225, 221,  71,  15,  38,  12, 165, 198,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,  23,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  73, 110, 112,
    117, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   1,   0,   1,   0,
     21, 130, 169, 163, 205,  91, 162, 138,
      1,   0,   0,   0, 114,   0,   0,   0,
     75, 101, 121,  98, 111,  97, 114, 100,
     73, 110, 112, 117, 116,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    101, 234, 235,  56,  16,  57,  32, 153,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f236a326041fb6f0 = b_f236a326041fb6f0.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f236a326041fb6f0[] = {
  &s_9920391038ebea65,
};
static const uint16_t m_f236a326041fb6f0[] = {0};
static const uint16_t i_f236a326041fb6f0[] = {0};
const ::capnp::_::RawSchema s_f236a326041fb6f0 = {
  0xf236a326041fb6f0, b_f236a326041fb6f0.words, 29, d_f236a326041fb6f0, m_f236a326041fb6f0,
  1, 1, i_f236a326041fb6f0, nullptr, nullptr, { &s_f236a326041fb6f0, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_8aa25bcda3a98215 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 130, 169, 163, 205,  91, 162, 138,
     19,   0,   0,   0,   2,   0,   0,   0,
    240, 182,  31,   4,  38, 163,  54, 242,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  10,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  73, 110, 112,
    117, 116,  46,  75, 101, 121,  98, 111,
     97, 114, 100,  73, 110, 112, 117, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    114, 105, 103, 104, 116,   0,   0,   0,
    108, 101, 102, 116,   0,   0,   0,   0,
    117, 112,   0,   0,   0,   0,   0,   0,
    100, 111, 119, 110,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8aa25bcda3a98215 = b_8aa25bcda3a98215.words;
#if !CAPNP_LITE
static const uint16_t m_8aa25bcda3a98215[] = {3, 1, 0, 2};
const ::capnp::_::RawSchema s_8aa25bcda3a98215 = {
  0x8aa25bcda3a98215, b_8aa25bcda3a98215.words, 35, nullptr, m_8aa25bcda3a98215,
  0, 4, nullptr, nullptr, nullptr, { &s_8aa25bcda3a98215, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(KeyboardInput_8aa25bcda3a98215, 8aa25bcda3a98215);
static const ::capnp::_::AlignedData<64> b_9920391038ebea65 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    101, 234, 235,  56,  16,  57,  32, 153,
     19,   0,   0,   0,   1,   0,   1,   0,
    240, 182,  31,   4,  38, 163,  54, 242,
      1,   0,   7,   0,   1,   0,   3,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 175,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  73, 110, 112,
    117, 116,  46, 116, 121, 112, 101,   0,
     12,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     69,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     64,   0,   0,   0,   3,   0,   1,   0,
     76,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     72,   0,   0,   0,   3,   0,   1,   0,
     84,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     81,   0,   0,   0, 146,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     84,   0,   0,   0,   3,   0,   1,   0,
     96,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 115, 101, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    107, 101, 121, 112, 114, 101, 115, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
     21, 130, 169, 163, 205,  91, 162, 138,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 110, 110, 101,
     99, 116,  82, 101, 113, 117, 101, 115,
    116,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9920391038ebea65 = b_9920391038ebea65.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9920391038ebea65[] = {
  &s_8aa25bcda3a98215,
  &s_f236a326041fb6f0,
};
static const uint16_t m_9920391038ebea65[] = {2, 1, 0};
static const uint16_t i_9920391038ebea65[] = {0, 1, 2};
const ::capnp::_::RawSchema s_9920391038ebea65 = {
  0x9920391038ebea65, b_9920391038ebea65.words, 64, d_9920391038ebea65, m_9920391038ebea65,
  2, 3, i_9920391038ebea65, nullptr, nullptr, { &s_9920391038ebea65, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<25> b_d50d4b869b61dac3 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    195, 218,  97, 155, 134,  75,  13, 213,
     13,   0,   0,   0,   1,   0,   1,   0,
    225, 221,  71,  15,  38,  12, 165, 198,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 154,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  69, 118, 101,
    110, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     52, 175, 232, 148,  53, 117,  41, 164,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 121, 112, 101,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d50d4b869b61dac3 = b_d50d4b869b61dac3.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d50d4b869b61dac3[] = {
  &s_a429753594e8af34,
};
static const uint16_t m_d50d4b869b61dac3[] = {0};
static const uint16_t i_d50d4b869b61dac3[] = {0};
const ::capnp::_::RawSchema s_d50d4b869b61dac3 = {
  0xd50d4b869b61dac3, b_d50d4b869b61dac3.words, 25, d_d50d4b869b61dac3, m_d50d4b869b61dac3,
  1, 1, i_d50d4b869b61dac3, nullptr, nullptr, { &s_d50d4b869b61dac3, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_a429753594e8af34 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     52, 175, 232, 148,  53, 117,  41, 164,
     19,   0,   0,   0,   1,   0,   1,   0,
    195, 218,  97, 155, 134,  75,  13, 213,
      1,   0,   7,   0,   1,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 194,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  69, 118, 101,
    110, 116,  46, 116, 121, 112, 101,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    113,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
    117, 110, 115, 101, 116,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 115,  99, 111, 110, 110, 101,
     99, 116,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99, 111, 110, 110, 101,  99, 116,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 114, 114, 111, 114,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_a429753594e8af34 = b_a429753594e8af34.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_a429753594e8af34[] = {
  &s_d50d4b869b61dac3,
};
static const uint16_t m_a429753594e8af34[] = {2, 1, 3, 0};
static const uint16_t i_a429753594e8af34[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_a429753594e8af34 = {
  0xa429753594e8af34, b_a429753594e8af34.words, 77, d_a429753594e8af34, m_a429753594e8af34,
  1, 4, i_a429753594e8af34, nullptr, nullptr, { &s_a429753594e8af34, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<77> b_9da92d54110a6635 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     53, 102,  10,  17,  84,  45, 169, 157,
     13,   0,   0,   0,   1,   0,   2,   0,
    225, 221,  71,  15,  38,  12, 165, 198,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 162,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  83, 113, 117,
     97, 114, 101,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0,  18,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     96,   0,   0,   0,   3,   0,   1,   0,
    108,   0,   0,   0,   2,   0,   1,   0,
      2,   0,   0,   0,   2,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    105,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      3,   0,   0,   0,   3,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104,   0,   0,   0,   3,   0,   1,   0,
    116,   0,   0,   0,   2,   0,   1,   0,
    120,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    121,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    119, 105, 100, 116, 104,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    104, 101, 105, 103, 104, 116,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9da92d54110a6635 = b_9da92d54110a6635.words;
#if !CAPNP_LITE
static const uint16_t m_9da92d54110a6635[] = {3, 2, 0, 1};
static const uint16_t i_9da92d54110a6635[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_9da92d54110a6635 = {
  0x9da92d54110a6635, b_9da92d54110a6635.words, 77, nullptr, m_9da92d54110a6635,
  0, 4, i_9da92d54110a6635, nullptr, nullptr, { &s_9da92d54110a6635, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<36> b_9f73902131386d8a = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    138, 109,  56,  49,  33, 144, 115, 159,
     13,   0,   0,   0,   1,   0,   0,   0,
    225, 221,  71,  15,  38,  12, 165, 198,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 170,   0,   0,   0,
     29,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  83, 113, 117,
     97, 114, 101, 115,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112, 101, 111, 112, 108, 101,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     53, 102,  10,  17,  84,  45, 169, 157,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_9f73902131386d8a = b_9f73902131386d8a.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_9f73902131386d8a[] = {
  &s_9da92d54110a6635,
};
static const uint16_t m_9f73902131386d8a[] = {0};
static const uint16_t i_9f73902131386d8a[] = {0};
const ::capnp::_::RawSchema s_9f73902131386d8a = {
  0x9f73902131386d8a, b_9f73902131386d8a.words, 36, d_9f73902131386d8a, m_9f73902131386d8a,
  1, 1, i_9f73902131386d8a, nullptr, nullptr, { &s_9f73902131386d8a, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<42> b_f67bbf4537b60d14 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     20,  13, 182,  55,  69, 191, 123, 246,
     13,   0,   0,   0,   1,   0,   2,   0,
    225, 221,  71,  15,  38,  12, 165, 198,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 234,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  77, 101, 115,
    115,  97, 103, 101,  84, 111,  67, 108,
    105, 101, 110, 116,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     16, 253, 235, 215,  93,  51, 239, 252,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    116, 105, 109, 101, 115, 116,  97, 109,
    112,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,  97, 116,  97,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f67bbf4537b60d14 = b_f67bbf4537b60d14.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f67bbf4537b60d14[] = {
  &s_fcef335dd7ebfd10,
};
static const uint16_t m_f67bbf4537b60d14[] = {1, 0};
static const uint16_t i_f67bbf4537b60d14[] = {0, 1};
const ::capnp::_::RawSchema s_f67bbf4537b60d14 = {
  0xf67bbf4537b60d14, b_f67bbf4537b60d14.words, 42, d_f67bbf4537b60d14, m_f67bbf4537b60d14,
  1, 2, i_f67bbf4537b60d14, nullptr, nullptr, { &s_f67bbf4537b60d14, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<48> b_fcef335dd7ebfd10 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     16, 253, 235, 215,  93,  51, 239, 252,
     29,   0,   0,   0,   1,   0,   2,   0,
     20,  13, 182,  55,  69, 191, 123, 246,
      1,   0,   7,   0,   1,   0,   2,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    115, 113, 117,  97, 114, 101,  46,  99,
     97, 112, 110, 112,  58,  77, 101, 115,
    115,  97, 103, 101,  84, 111,  67, 108,
    105, 101, 110, 116,  46, 100,  97, 116,
     97,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     36,   0,   0,   0,   3,   0,   1,   0,
     48,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     45,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
    115, 113, 117,  97, 114, 101, 115,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    138, 109,  56,  49,  33, 144, 115, 159,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101, 118, 101, 110, 116,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
    195, 218,  97, 155, 134,  75,  13, 213,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_fcef335dd7ebfd10 = b_fcef335dd7ebfd10.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_fcef335dd7ebfd10[] = {
  &s_9f73902131386d8a,
  &s_d50d4b869b61dac3,
  &s_f67bbf4537b60d14,
};
static const uint16_t m_fcef335dd7ebfd10[] = {1, 0};
static const uint16_t i_fcef335dd7ebfd10[] = {0, 1};
const ::capnp::_::RawSchema s_fcef335dd7ebfd10 = {
  0xfcef335dd7ebfd10, b_fcef335dd7ebfd10.words, 48, d_fcef335dd7ebfd10, m_fcef335dd7ebfd10,
  3, 2, i_fcef335dd7ebfd10, nullptr, nullptr, { &s_fcef335dd7ebfd10, nullptr, nullptr, 0, 0, nullptr }, false
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


// Input
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Input::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Input::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Input::Type
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Input::Type::_capnpPrivate::dataWordSize;
constexpr uint16_t Input::Type::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Input::Type::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Input::Type::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Event
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Event::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Event::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Event::Type
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Event::Type::_capnpPrivate::dataWordSize;
constexpr uint16_t Event::Type::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Event::Type::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Event::Type::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Square
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Square::_capnpPrivate::dataWordSize;
constexpr uint16_t Square::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Square::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Square::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// Squares
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t Squares::_capnpPrivate::dataWordSize;
constexpr uint16_t Squares::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind Squares::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Squares::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MessageToClient
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MessageToClient::_capnpPrivate::dataWordSize;
constexpr uint16_t MessageToClient::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MessageToClient::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MessageToClient::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE

// MessageToClient::Data
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr uint16_t MessageToClient::Data::_capnpPrivate::dataWordSize;
constexpr uint16_t MessageToClient::Data::_capnpPrivate::pointerCount;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#if !CAPNP_LITE
#if CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
constexpr ::capnp::Kind MessageToClient::Data::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* MessageToClient::Data::_capnpPrivate::schema;
#endif  // !CAPNP_NEED_REDUNDANT_CONSTEXPR_DECL
#endif  // !CAPNP_LITE



